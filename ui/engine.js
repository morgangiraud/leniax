"use strict";

///////////////////////////
// Globals
///////////////////////////
const NB_CHARS = (ord('Z') - ord('A')) + (ord('z') - ord('a')) + (ord('þ') - ord('À'))
const PRECISION = 1000000;
const EPSILON = 1/PRECISION;  // machine epsilon
const π = Math.PI;
var NS = 13;  // R = space resolution = kernel radius (potentialborhood size) in cells
var TS = 10;  // T = time resolution = time step in steps

var gen = 0;
var time = 0;
var runGen = null;

//*** running
var IS_RUNNING = true;

//*** control
var optCenter = 0;  const Center_OFF = 0, Center_POS = 1, Center_AM = 2, Center_TH = 3;
const Flip_H = 1, Flip_V = 2, Flip_HV = 3, Mirror_H = 4, Mirror_X = 5, Mirror_D = 6;
var transA = null;
var transS = null;


//*** display
var WORLD_SIZE = 1;
var PIXEL = 1;
var P_SIZE = 1;
var isKernelDrawn = false;
const COLOR_BLACKWHITE = 0; 
const COLOR_CARMINEBLUE = 1; 
const COLOR_CARMINEGREEN = 2;
const COLOR_CINNAMON = 3;
const COLOR_GOLDEN = 4;
const COLOR_MSDOS = 5;
const COLOR_RAINBOW = 6;
const COLOR_SALVIA = 7;
const COLOR_WHITEBLACK = 8;
const COLORS = [
	[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [1, 1, 1], [1, 1, 1], [1, 1, 1], [2, 2, 2], [2, 2, 2], [3, 3, 3], [3, 3, 3], [4, 4, 4], [5, 5, 5], [6, 6, 6], [7, 7, 7], [7, 7, 7], [8, 8, 8], [10, 10, 10], [11, 11, 11], [12, 12, 12], [13, 13, 13], [14, 14, 14], [15, 15, 15], [16, 16, 16], [17, 17, 17], [18, 18, 18], [20, 20, 20], [21, 21, 21], [22, 22, 22], [23, 23, 23], [24, 24, 24], [25, 25, 25], [26, 26, 26], [27, 27, 27], [28, 28, 28], [29, 29, 29], [30, 30, 30], [32, 32, 32], [33, 33, 33], [34, 34, 34], [35, 35, 35], [36, 36, 36], [37, 37, 37], [38, 38, 38], [39, 39, 39], [40, 40, 40], [41, 41, 41], [42, 42, 42], [43, 43, 43], [45, 45, 45], [46, 46, 46], [47, 47, 47], [48, 48, 48], [49, 49, 49], [50, 50, 50], [51, 51, 51], [52, 52, 52], [53, 53, 53], [54, 54, 54], [55, 55, 55], [56, 56, 56], [58, 58, 58], [59, 59, 59], [60, 60, 60], [61, 61, 61], [62, 62, 62], [63, 63, 63], [64, 64, 64], [65, 65, 65], [66, 66, 66], [67, 67, 67], [68, 68, 68], [69, 69, 69], [70, 70, 70], [71, 71, 71], [73, 73, 73], [74, 74, 74], [75, 75, 75], [76, 76, 76], [77, 77, 77], [78, 78, 78], [79, 79, 79], [80, 80, 80], [81, 81, 81], [82, 82, 82], [83, 83, 83], [84, 84, 84], [85, 85, 85], [86, 86, 86], [87, 87, 87], [88, 88, 88], [90, 90, 90], [91, 91, 91], [92, 92, 92], [93, 93, 93], [94, 94, 94], [95, 95, 95], [96, 96, 96], [97, 97, 97], [98, 98, 98], [99, 99, 99], [100, 100, 100], [101, 101, 101], [102, 102, 102], [103, 103, 103], [104, 104, 104], [105, 105, 105], [107, 107, 107], [108, 108, 108], [109, 109, 109], [110, 110, 110], [111, 111, 111], [112, 112, 112], [113, 113, 113], [114, 114, 114], [115, 115, 115], [116, 116, 116], [117, 117, 117], [118, 118, 118], [119, 119, 119], [120, 120, 120], [121, 121, 121], [122, 122, 122], [123, 123, 123], [124, 124, 124], [125, 125, 125], [127, 127, 127], [128, 128, 128], [129, 129, 129], [130, 130, 130], [131, 131, 131], [132, 132, 132], [133, 133, 133], [134, 134, 134], [135, 135, 135], [136, 136, 136], [137, 137, 137], [138, 138, 138], [139, 139, 139], [140, 140, 140], [141, 141, 141], [142, 142, 142], [143, 143, 143], [144, 144, 144], [145, 145, 145], [146, 146, 146], [148, 148, 148], [149, 149, 149], [150, 150, 150], [151, 151, 151], [152, 152, 152], [153, 153, 153], [154, 154, 154], [155, 155, 155], [156, 156, 156], [157, 157, 157], [158, 158, 158], [159, 159, 159], [160, 160, 160], [161, 161, 161], [162, 162, 162], [163, 163, 163], [164, 164, 164], [165, 165, 165], [166, 166, 166], [167, 167, 167], [168, 168, 168], [169, 169, 169], [171, 171, 171], [172, 172, 172], [173, 173, 173], [174, 174, 174], [175, 175, 175], [176, 176, 176], [177, 177, 177], [178, 178, 178], [179, 179, 179], [180, 180, 180], [181, 181, 181], [182, 182, 182], [183, 183, 183], [184, 184, 184], [185, 185, 185], [186, 186, 186], [187, 187, 187], [188, 188, 188], [189, 189, 189], [190, 190, 190], [191, 191, 191], [192, 192, 192], [193, 193, 193], [194, 194, 194], [196, 196, 196], [197, 197, 197], [198, 198, 198], [199, 199, 199], [200, 200, 200], [201, 201, 201], [202, 202, 202], [203, 203, 203], [204, 204, 204], [205, 205, 205], [206, 206, 206], [207, 207, 207], [208, 208, 208], [209, 209, 209], [210, 210, 210], [211, 211, 211], [212, 212, 212], [213, 213, 213], [214, 214, 214], [215, 215, 215], [216, 216, 216], [217, 217, 217], [218, 218, 218], [219, 219, 219], [220, 220, 220], [221, 221, 221], [222, 222, 222], [223, 223, 223], [225, 225, 225], [226, 226, 226], [227, 227, 227], [228, 228, 228], [229, 229, 229], [230, 230, 230], [231, 231, 231], [232, 232, 232], [233, 233, 233], [234, 234, 234], [235, 235, 235], [236, 236, 236], [237, 237, 237], [238, 238, 238], [239, 239, 239], [240, 240, 240], [241, 241, 241], [242, 242, 242], [243, 243, 243], [244, 244, 244], [245, 245, 245], [246, 246, 246], [247, 247, 247], [248, 248, 248], [249, 249, 249], [250, 250, 250], [251, 251, 251], [252, 252, 252], [253, 253, 253], [254, 254, 254]],
	[[0, 110, 184], [0, 110, 184], [21, 112, 183], [33, 113, 182], [42, 115, 181], [49, 116, 180], [55, 118, 179], [60, 119, 178], [65, 121, 177], [70, 122, 176], [74, 124, 175], [78, 125, 175], [81, 127, 174], [85, 128, 173], [88, 129, 172], [91, 131, 171], [94, 132, 170], [97, 133, 169], [100, 135, 168], [102, 136, 168], [105, 137, 167], [107, 138, 166], [110, 139, 165], [112, 141, 164], [114, 142, 163], [117, 143, 163], [119, 144, 162], [121, 145, 161], [123, 147, 160], [125, 148, 159], [127, 149, 158], [129, 150, 158], [131, 151, 157], [133, 152, 156], [135, 153, 155], [136, 155, 154], [138, 156, 154], [140, 157, 153], [142, 158, 152], [143, 159, 151], [145, 160, 150], [147, 161, 150], [148, 162, 149], [150, 163, 148], [152, 164, 147], [153, 165, 146], [155, 166, 145], [156, 167, 145], [158, 168, 144], [159, 169, 143], [161, 170, 142], [162, 171, 141], [164, 172, 140], [165, 173, 140], [167, 174, 139], [168, 175, 138], [170, 176, 137], [171, 177, 136], [172, 178, 135], [174, 179, 134], [175, 180, 134], [177, 181, 133], [178, 182, 132], [179, 183, 131], [181, 184, 130], [182, 185, 129], [183, 186, 128], [185, 187, 127], [186, 188, 126], [187, 189, 125], [188, 190, 124], [190, 191, 123], [191, 192, 123], [192, 193, 122], [194, 194, 121], [195, 195, 120], [196, 196, 119], [197, 197, 118], [199, 198, 116], [200, 199, 115], [201, 199, 114], [202, 200, 113], [203, 201, 112], [205, 202, 111], [206, 203, 110], [207, 204, 109], [208, 205, 108], [210, 206, 107], [211, 207, 105], [212, 208, 104], [213, 209, 103], [214, 210, 102], [215, 211, 100], [217, 211, 99], [218, 212, 98], [219, 213, 97], [220, 214, 95], [221, 215, 94], [222, 216, 92], [224, 217, 91], [225, 218, 89], [226, 219, 88], [227, 220, 86], [228, 220, 85], [229, 221, 83], [230, 222, 82], [231, 223, 80], [233, 224, 78], [234, 225, 76], [235, 226, 74], [236, 227, 72], [237, 228, 70], [238, 228, 68], [239, 229, 66], [240, 230, 64], [241, 231, 62], [243, 232, 59], [244, 233, 57], [245, 234, 54], [246, 235, 51], [247, 235, 48], [248, 236, 45], [249, 237, 41], [250, 238, 37], [251, 239, 32], [252, 240, 27], [253, 241, 21], [254, 242, 12], [255, 242, 0], [255, 241, 0], [254, 240, 1], [254, 239, 2], [253, 238, 3], [253, 237, 4], [252, 236, 5], [252, 235, 6], [251, 234, 7], [251, 233, 8], [250, 232, 9], [250, 231, 10], [249, 230, 11], [249, 229, 12], [248, 228, 12], [248, 227, 13], [247, 226, 14], [247, 225, 15], [246, 224, 15], [246, 223, 16], [245, 222, 17], [245, 221, 17], [244, 220, 18], [244, 219, 18], [243, 218, 19], [243, 217, 20], [242, 216, 20], [242, 214, 21], [241, 213, 21], [241, 212, 22], [240, 211, 22], [240, 210, 23], [239, 209, 23], [239, 208, 24], [238, 207, 24], [238, 206, 25], [237, 205, 25], [237, 204, 25], [236, 202, 26], [236, 201, 26], [235, 200, 27], [235, 199, 27], [234, 198, 27], [234, 197, 28], [233, 196, 28], [233, 195, 29], [232, 193, 29], [232, 192, 29], [231, 191, 30], [231, 190, 30], [230, 189, 30], [230, 188, 31], [229, 186, 31], [229, 185, 32], [228, 184, 32], [228, 183, 32], [227, 182, 33], [227, 181, 33], [227, 179, 33], [226, 178, 34], [226, 177, 34], [225, 176, 34], [225, 174, 35], [224, 173, 35], [224, 172, 35], [223, 171, 35], [223, 169, 36], [223, 168, 36], [222, 167, 36], [222, 165, 37], [221, 164, 37], [221, 163, 37], [220, 162, 38], [220, 160, 38], [220, 159, 38], [219, 157, 38], [219, 156, 39], [218, 155, 39], [218, 153, 39], [218, 152, 40], [217, 150, 40], [217, 149, 40], [216, 148, 40], [216, 146, 41], [216, 145, 41], [215, 143, 41], [215, 142, 42], [214, 140, 42], [214, 138, 42], [214, 137, 42], [213, 135, 43], [213, 134, 43], [213, 132, 43], [212, 130, 44], [212, 129, 44], [212, 127, 44], [211, 125, 44], [211, 123, 45], [211, 122, 45], [210, 120, 45], [210, 118, 45], [210, 116, 46], [209, 114, 46], [209, 112, 46], [209, 110, 47], [208, 108, 47], [208, 105, 47], [208, 103, 47], [208, 101, 48], [207, 99, 48], [207, 96, 48], [207, 94, 49], [207, 91, 49], [206, 88, 49], [206, 85, 50], [206, 82, 50], [206, 79, 50], [206, 76, 50], [205, 73, 51], [205, 69, 51], [205, 65, 51], [205, 61, 52], [205, 56, 52], [205, 51, 52], [205, 45, 53], [204, 38, 53], [204, 30, 53]],
	[[26, 116, 68], [26, 116, 68], [36, 116, 67], [43, 117, 66], [49, 117, 65], [54, 118, 64], [59, 118, 63], [63, 119, 62], [67, 119, 61], [70, 120, 60], [73, 121, 60], [76, 121, 59], [79, 122, 59], [82, 123, 58], [85, 124, 57], [87, 124, 57], [89, 125, 56], [92, 126, 56], [94, 127, 56], [96, 128, 55], [98, 129, 55], [100, 130, 54], [102, 130, 54], [104, 131, 53], [106, 132, 53], [108, 133, 53], [110, 134, 52], [112, 135, 52], [113, 136, 52], [115, 137, 51], [117, 138, 51], [119, 139, 51], [120, 140, 50], [122, 141, 50], [124, 142, 50], [125, 143, 50], [127, 144, 49], [129, 145, 49], [130, 146, 49], [132, 147, 48], [133, 148, 48], [135, 149, 48], [137, 150, 48], [138, 151, 47], [140, 152, 47], [141, 153, 47], [143, 154, 47], [144, 155, 46], [146, 156, 46], [147, 157, 46], [149, 158, 45], [150, 159, 45], [152, 160, 45], [153, 161, 45], [155, 163, 44], [156, 164, 44], [158, 165, 44], [159, 166, 44], [160, 167, 43], [162, 168, 43], [163, 169, 43], [165, 170, 42], [166, 171, 42], [168, 172, 42], [169, 173, 42], [170, 174, 41], [172, 175, 41], [173, 176, 41], [175, 177, 40], [176, 178, 40], [177, 180, 40], [179, 181, 39], [180, 182, 39], [182, 183, 39], [183, 184, 38], [184, 185, 38], [186, 186, 38], [187, 187, 37], [189, 188, 37], [190, 189, 37], [191, 190, 36], [193, 191, 36], [194, 192, 36], [195, 194, 35], [197, 195, 35], [198, 196, 34], [200, 197, 34], [201, 198, 34], [202, 199, 33], [204, 200, 33], [205, 201, 32], [206, 202, 32], [208, 203, 31], [209, 204, 31], [210, 205, 30], [212, 207, 30], [213, 208, 29], [214, 209, 29], [216, 210, 28], [217, 211, 28], [218, 212, 27], [220, 213, 27], [221, 214, 26], [222, 215, 26], [224, 216, 25], [225, 217, 24], [226, 218, 24], [228, 220, 23], [229, 221, 22], [230, 222, 22], [232, 223, 21], [233, 224, 20], [234, 225, 19], [236, 226, 18], [237, 227, 18], [238, 228, 17], [240, 229, 16], [241, 230, 15], [242, 232, 14], [244, 233, 12], [245, 234, 11], [246, 235, 10], [248, 236, 8], [249, 237, 7], [250, 238, 5], [252, 239, 4], [253, 240, 2], [254, 241, 1], [255, 242, 0], [255, 241, 0], [254, 240, 1], [254, 239, 2], [253, 238, 3], [253, 237, 4], [252, 236, 5], [252, 235, 6], [251, 234, 7], [251, 233, 8], [250, 232, 9], [250, 231, 10], [249, 230, 11], [249, 229, 12], [248, 228, 12], [248, 227, 13], [247, 226, 14], [247, 225, 15], [246, 224, 15], [246, 223, 16], [245, 222, 17], [245, 221, 17], [244, 220, 18], [244, 219, 18], [243, 218, 19], [243, 217, 20], [242, 216, 20], [242, 214, 21], [241, 213, 21], [241, 212, 22], [240, 211, 22], [240, 210, 23], [239, 209, 23], [239, 208, 24], [238, 207, 24], [238, 206, 25], [237, 205, 25], [237, 204, 25], [236, 202, 26], [236, 201, 26], [235, 200, 27], [235, 199, 27], [234, 198, 27], [234, 197, 28], [233, 196, 28], [233, 195, 29], [232, 193, 29], [232, 192, 29], [231, 191, 30], [231, 190, 30], [230, 189, 30], [230, 188, 31], [229, 186, 31], [229, 185, 32], [228, 184, 32], [228, 183, 32], [227, 182, 33], [227, 181, 33], [227, 179, 33], [226, 178, 34], [226, 177, 34], [225, 176, 34], [225, 174, 35], [224, 173, 35], [224, 172, 35], [223, 171, 35], [223, 169, 36], [223, 168, 36], [222, 167, 36], [222, 165, 37], [221, 164, 37], [221, 163, 37], [220, 162, 38], [220, 160, 38], [220, 159, 38], [219, 157, 38], [219, 156, 39], [218, 155, 39], [218, 153, 39], [218, 152, 40], [217, 150, 40], [217, 149, 40], [216, 148, 40], [216, 146, 41], [216, 145, 41], [215, 143, 41], [215, 142, 42], [214, 140, 42], [214, 138, 42], [214, 137, 42], [213, 135, 43], [213, 134, 43], [213, 132, 43], [212, 130, 44], [212, 129, 44], [212, 127, 44], [211, 125, 44], [211, 123, 45], [211, 122, 45], [210, 120, 45], [210, 118, 45], [210, 116, 46], [209, 114, 46], [209, 112, 46], [209, 110, 47], [208, 108, 47], [208, 105, 47], [208, 103, 47], [208, 101, 48], [207, 99, 48], [207, 96, 48], [207, 94, 49], [207, 91, 49], [206, 88, 49], [206, 85, 50], [206, 82, 50], [206, 79, 50], [206, 76, 50], [205, 73, 51], [205, 69, 51], [205, 65, 51], [205, 61, 52], [205, 56, 52], [205, 51, 52], [205, 45, 53], [204, 38, 53], [204, 30, 53]],
	[[167, 212, 228], [167, 212, 228], [167, 211, 227], [166, 210, 226], [165, 209, 225], [165, 208, 224], [164, 207, 223], [164, 206, 222], [163, 205, 221], [162, 204, 219], [162, 203, 218], [161, 202, 217], [161, 201, 216], [160, 200, 215], [159, 199, 214], [159, 199, 213], [158, 198, 211], [158, 197, 210], [157, 196, 209], [156, 195, 208], [156, 194, 207], [155, 193, 206], [155, 192, 205], [154, 191, 203], [153, 190, 202], [153, 189, 201], [152, 188, 200], [152, 187, 199], [151, 186, 198], [150, 185, 197], [150, 184, 195], [149, 183, 194], [149, 182, 193], [148, 181, 192], [147, 180, 191], [147, 179, 190], [146, 178, 189], [146, 177, 187], [145, 176, 186], [145, 175, 185], [144, 174, 184], [143, 173, 183], [143, 172, 182], [142, 171, 180], [142, 170, 179], [141, 169, 178], [141, 168, 177], [140, 167, 176], [139, 166, 175], [139, 165, 173], [138, 164, 172], [138, 163, 171], [137, 162, 170], [137, 161, 169], [136, 160, 168], [135, 159, 166], [135, 158, 165], [134, 157, 164], [134, 156, 163], [133, 155, 162], [133, 154, 160], [132, 153, 159], [132, 152, 158], [131, 151, 157], [131, 150, 156], [130, 149, 154], [130, 148, 153], [129, 147, 152], [128, 146, 151], [128, 144, 149], [127, 143, 148], [127, 142, 147], [126, 141, 146], [126, 140, 145], [125, 139, 143], [125, 138, 142], [124, 137, 141], [124, 136, 140], [123, 135, 138], [123, 134, 137], [122, 133, 136], [122, 132, 134], [121, 131, 133], [121, 130, 132], [121, 129, 131], [120, 128, 129], [120, 127, 128], [119, 126, 127], [119, 125, 125], [118, 124, 124], [118, 123, 123], [117, 122, 121], [117, 121, 120], [117, 120, 119], [116, 119, 117], [116, 118, 116], [115, 117, 114], [115, 116, 113], [115, 115, 112], [114, 113, 110], [114, 112, 109], [114, 111, 107], [113, 110, 106], [113, 109, 104], [113, 108, 103], [112, 107, 101], [112, 106, 99], [112, 105, 98], [112, 104, 96], [111, 103, 95], [111, 102, 93], [111, 100, 91], [111, 99, 89], [111, 98, 87], [111, 97, 86], [111, 96, 84], [110, 95, 82], [110, 94, 79], [110, 92, 77], [110, 91, 75], [111, 90, 73], [111, 89, 70], [111, 88, 68], [111, 86, 65], [111, 85, 62], [112, 84, 59], [112, 83, 55], [112, 81, 51], [113, 80, 47], [114, 81, 47], [115, 82, 48], [116, 83, 49], [117, 84, 50], [118, 85, 50], [119, 86, 51], [120, 87, 52], [121, 88, 52], [122, 89, 53], [123, 90, 54], [124, 91, 55], [126, 92, 55], [127, 93, 56], [128, 94, 57], [129, 95, 57], [130, 96, 58], [131, 97, 58], [132, 98, 59], [133, 99, 60], [134, 100, 60], [135, 101, 61], [136, 101, 62], [138, 102, 62], [139, 103, 63], [140, 104, 64], [141, 105, 64], [142, 106, 65], [143, 107, 66], [144, 108, 66], [145, 109, 67], [146, 110, 67], [147, 111, 68], [149, 112, 69], [150, 113, 69], [151, 114, 70], [152, 115, 71], [153, 116, 71], [154, 116, 72], [155, 117, 73], [156, 118, 73], [157, 119, 74], [159, 120, 74], [160, 121, 75], [161, 122, 76], [162, 123, 76], [163, 124, 77], [164, 125, 77], [165, 126, 78], [166, 127, 79], [168, 128, 79], [169, 128, 80], [170, 129, 81], [171, 130, 81], [172, 131, 82], [173, 132, 82], [174, 133, 83], [175, 134, 84], [176, 135, 84], [178, 136, 85], [179, 137, 85], [180, 138, 86], [181, 139, 87], [182, 139, 87], [183, 140, 88], [184, 141, 89], [185, 142, 89], [187, 143, 90], [188, 144, 90], [189, 145, 91], [190, 146, 92], [191, 147, 92], [192, 148, 93], [193, 149, 93], [194, 149, 94], [195, 150, 95], [197, 151, 95], [198, 152, 96], [199, 153, 96], [200, 154, 97], [201, 155, 98], [202, 156, 98], [203, 157, 99], [204, 158, 100], [206, 159, 100], [207, 159, 101], [208, 160, 101], [209, 161, 102], [210, 162, 103], [211, 163, 103], [212, 164, 104], [213, 165, 104], [214, 166, 105], [216, 167, 106], [217, 168, 106], [218, 168, 107], [219, 169, 107], [220, 170, 108], [221, 171, 109], [222, 172, 109], [223, 173, 110], [225, 174, 110], [226, 175, 111], [227, 176, 112], [228, 177, 112], [229, 177, 113], [230, 178, 113], [231, 179, 114], [232, 180, 115], [233, 181, 115], [235, 182, 116], [236, 183, 116], [237, 184, 117], [238, 185, 118], [239, 186, 118], [240, 186, 119], [241, 187, 119], [242, 188, 120], [243, 189, 121], [245, 190, 121], [246, 191, 122], [247, 192, 122], [248, 193, 123], [249, 194, 124], [250, 195, 124], [251, 195, 125], [252, 196, 125]],
	[[182, 191, 193], [182, 191, 193], [181, 190, 192], [180, 189, 191], [179, 188, 190], [178, 187, 189], [177, 185, 187], [176, 184, 186], [174, 183, 185], [173, 182, 184], [172, 181, 183], [171, 180, 181], [170, 179, 180], [169, 177, 179], [168, 176, 178], [167, 175, 177], [165, 174, 175], [164, 173, 174], [163, 172, 173], [162, 170, 172], [161, 169, 171], [160, 168, 169], [159, 167, 168], [158, 166, 167], [156, 165, 166], [155, 163, 165], [154, 162, 164], [153, 161, 162], [152, 160, 161], [151, 159, 160], [150, 158, 159], [149, 157, 158], [148, 155, 156], [146, 154, 155], [145, 153, 154], [144, 152, 153], [143, 151, 152], [142, 150, 150], [141, 148, 149], [140, 147, 148], [139, 146, 147], [137, 145, 146], [136, 144, 144], [135, 143, 143], [134, 141, 142], [133, 140, 141], [132, 139, 140], [131, 138, 138], [129, 137, 137], [128, 136, 136], [127, 134, 135], [126, 133, 134], [125, 132, 132], [124, 131, 131], [123, 130, 130], [122, 129, 129], [120, 128, 128], [119, 126, 126], [118, 125, 125], [117, 124, 124], [116, 123, 123], [115, 122, 122], [114, 121, 120], [113, 119, 119], [111, 118, 118], [110, 117, 117], [109, 116, 116], [108, 115, 114], [107, 114, 113], [106, 112, 112], [105, 111, 111], [103, 110, 109], [102, 109, 108], [101, 108, 107], [100, 107, 106], [99, 105, 105], [98, 104, 103], [97, 103, 102], [95, 102, 101], [94, 101, 100], [93, 100, 99], [92, 98, 97], [91, 97, 96], [90, 96, 95], [89, 95, 94], [88, 94, 92], [86, 93, 91], [85, 91, 90], [84, 90, 89], [83, 89, 88], [82, 88, 86], [81, 87, 85], [79, 86, 84], [78, 84, 83], [77, 83, 81], [76, 82, 80], [75, 81, 79], [74, 80, 78], [73, 79, 76], [71, 78, 75], [70, 76, 74], [69, 75, 73], [68, 74, 71], [67, 73, 70], [66, 72, 69], [65, 71, 68], [63, 70, 66], [62, 68, 65], [61, 67, 64], [60, 66, 63], [59, 65, 61], [58, 64, 60], [56, 63, 59], [55, 62, 57], [54, 61, 56], [53, 60, 55], [52, 58, 53], [50, 57, 52], [49, 56, 51], [48, 55, 49], [47, 54, 48], [46, 53, 46], [44, 52, 45], [43, 52, 43], [42, 51, 42], [41, 50, 40], [39, 49, 38], [38, 49, 36], [37, 49, 34], [42, 48, 32], [46, 48, 32], [49, 48, 31], [52, 49, 31], [54, 49, 30], [57, 49, 30], [59, 50, 30], [61, 51, 30], [63, 51, 30], [65, 52, 30], [67, 53, 31], [69, 53, 31], [71, 54, 31], [73, 55, 31], [74, 56, 32], [76, 57, 32], [78, 58, 32], [80, 58, 33], [81, 59, 33], [83, 60, 33], [85, 61, 34], [86, 62, 34], [88, 63, 34], [89, 64, 35], [91, 65, 35], [93, 65, 36], [94, 66, 36], [96, 67, 37], [97, 68, 37], [99, 69, 37], [101, 70, 38], [102, 71, 38], [104, 72, 39], [105, 73, 39], [107, 74, 40], [108, 75, 40], [110, 76, 41], [111, 77, 41], [113, 78, 42], [114, 79, 42], [116, 79, 43], [118, 80, 43], [119, 81, 44], [121, 82, 44], [122, 83, 45], [124, 84, 45], [125, 85, 46], [127, 86, 46], [128, 87, 47], [130, 88, 47], [131, 89, 48], [133, 90, 48], [134, 91, 49], [136, 92, 49], [137, 93, 50], [139, 94, 50], [140, 95, 51], [142, 96, 51], [143, 97, 52], [145, 98, 52], [146, 99, 53], [148, 100, 53], [149, 101, 54], [151, 101, 54], [152, 102, 55], [154, 103, 55], [155, 104, 56], [157, 105, 56], [158, 106, 57], [160, 107, 57], [161, 108, 58], [163, 109, 58], [164, 110, 59], [166, 111, 59], [167, 112, 60], [169, 113, 60], [170, 114, 61], [172, 115, 61], [173, 116, 62], [174, 117, 62], [176, 118, 63], [177, 119, 63], [179, 120, 64], [180, 121, 64], [182, 122, 65], [183, 123, 65], [185, 124, 66], [186, 125, 66], [188, 126, 67], [189, 127, 68], [191, 127, 68], [192, 128, 69], [194, 129, 69], [195, 130, 70], [197, 131, 70], [198, 132, 71], [200, 133, 71], [201, 134, 72], [202, 135, 72], [204, 136, 73], [205, 137, 73], [207, 138, 74], [208, 139, 74], [210, 140, 75], [211, 141, 75], [213, 142, 76], [214, 143, 76], [216, 144, 77], [217, 145, 77], [219, 146, 78], [220, 147, 78], [222, 148, 79], [223, 149, 80], [224, 150, 80], [226, 151, 81], [227, 152, 81], [229, 153, 82], [230, 153, 82], [232, 154, 83], [233, 155, 83], [235, 156, 84], [236, 157, 84], [238, 158, 85], [239, 159, 85], [241, 160, 86], [242, 161, 86]],
	[[12, 7, 134], [12, 7, 134], [18, 6, 134], [24, 6, 135], [28, 6, 135], [32, 6, 135], [35, 6, 136], [38, 6, 136], [41, 6, 137], [44, 5, 137], [46, 5, 137], [48, 5, 138], [50, 5, 138], [53, 5, 139], [55, 5, 139], [57, 5, 140], [58, 5, 140], [60, 5, 141], [62, 4, 141], [64, 4, 142], [65, 4, 142], [67, 4, 143], [68, 4, 143], [70, 4, 144], [71, 4, 144], [73, 4, 145], [74, 4, 145], [76, 3, 146], [77, 3, 146], [78, 3, 147], [80, 3, 148], [81, 3, 148], [82, 3, 149], [83, 3, 149], [85, 3, 150], [86, 3, 150], [87, 2, 151], [88, 2, 152], [89, 2, 152], [91, 2, 153], [92, 2, 153], [93, 2, 154], [94, 2, 154], [95, 2, 155], [96, 2, 156], [97, 2, 156], [99, 1, 157], [100, 1, 158], [101, 1, 158], [102, 1, 159], [103, 1, 159], [104, 1, 160], [105, 1, 161], [106, 1, 161], [107, 1, 162], [108, 0, 162], [109, 0, 163], [110, 0, 164], [111, 0, 164], [112, 0, 165], [113, 0, 166], [114, 0, 166], [115, 0, 167], [116, 0, 168], [117, 0, 168], [119, 2, 168], [120, 4, 167], [122, 6, 166], [123, 9, 166], [125, 11, 165], [127, 13, 165], [128, 15, 164], [130, 16, 163], [131, 18, 163], [132, 19, 162], [134, 21, 162], [135, 22, 161], [137, 23, 161], [138, 25, 160], [139, 26, 159], [141, 27, 159], [142, 28, 158], [143, 29, 158], [145, 30, 157], [146, 31, 156], [147, 32, 156], [148, 33, 155], [150, 33, 155], [151, 34, 154], [152, 35, 153], [153, 36, 153], [155, 37, 152], [156, 38, 151], [157, 38, 151], [158, 39, 150], [159, 40, 150], [160, 41, 149], [161, 41, 148], [163, 42, 148], [164, 43, 147], [165, 43, 146], [166, 44, 146], [167, 45, 145], [168, 45, 145], [169, 46, 144], [170, 47, 143], [171, 47, 143], [172, 48, 142], [173, 48, 141], [174, 49, 141], [176, 50, 140], [177, 50, 139], [178, 51, 139], [179, 51, 138], [180, 52, 137], [181, 52, 137], [182, 53, 136], [183, 54, 135], [184, 54, 134], [185, 55, 134], [186, 55, 133], [187, 56, 132], [187, 56, 132], [188, 57, 131], [189, 57, 130], [190, 58, 129], [191, 58, 129], [192, 59, 128], [193, 61, 127], [194, 64, 126], [195, 66, 126], [196, 68, 125], [197, 71, 124], [198, 73, 123], [199, 75, 122], [200, 77, 122], [201, 79, 121], [201, 80, 120], [202, 82, 119], [203, 84, 118], [204, 86, 118], [205, 87, 117], [206, 89, 116], [207, 91, 115], [208, 92, 114], [209, 94, 113], [210, 95, 113], [210, 97, 112], [211, 98, 111], [212, 100, 110], [213, 101, 109], [214, 102, 108], [215, 104, 108], [216, 105, 107], [217, 106, 106], [217, 108, 105], [218, 109, 104], [219, 110, 103], [220, 112, 102], [221, 113, 101], [222, 114, 100], [223, 115, 99], [224, 116, 98], [224, 118, 97], [225, 119, 96], [226, 120, 95], [227, 121, 94], [228, 122, 93], [229, 123, 92], [230, 125, 91], [230, 126, 90], [231, 127, 89], [232, 128, 88], [233, 129, 87], [234, 130, 86], [235, 131, 85], [236, 132, 84], [236, 133, 82], [237, 134, 81], [238, 135, 80], [239, 136, 79], [240, 137, 78], [241, 138, 76], [242, 139, 75], [242, 140, 74], [243, 141, 72], [244, 142, 71], [245, 143, 69], [246, 144, 68], [247, 145, 66], [247, 146, 65], [247, 148, 68], [247, 151, 71], [247, 153, 73], [247, 155, 76], [247, 158, 78], [247, 160, 81], [247, 162, 83], [247, 164, 85], [246, 166, 88], [246, 168, 90], [246, 170, 92], [246, 172, 94], [246, 174, 96], [246, 176, 97], [246, 178, 99], [246, 180, 101], [246, 182, 103], [246, 184, 105], [246, 186, 106], [246, 187, 108], [246, 189, 110], [246, 191, 111], [246, 193, 113], [247, 195, 114], [247, 196, 116], [247, 198, 117], [247, 200, 119], [247, 201, 120], [247, 203, 122], [247, 205, 123], [247, 206, 125], [247, 208, 126], [247, 210, 128], [247, 211, 129], [248, 213, 130], [248, 214, 132], [248, 216, 133], [248, 218, 134], [248, 219, 136], [248, 221, 137], [248, 222, 138], [249, 224, 139], [249, 225, 141], [249, 227, 142], [249, 228, 143], [249, 230, 144], [249, 231, 146], [250, 233, 147], [250, 234, 148], [250, 236, 149], [250, 237, 150], [250, 239, 152], [250, 240, 153], [251, 242, 154], [251, 243, 155], [251, 245, 156], [251, 246, 157], [251, 247, 159], [252, 249, 160], [252, 250, 161], [252, 252, 162], [252, 253, 163]],
	[[0, 0, 0], [255, 0, 0], [255, 15, 0], [255, 25, 0], [255, 33, 0], [255, 39, 0], [255, 44, 0], [255, 48, 0], [255, 52, 0], [255, 56, 0], [255, 60, 0], [255, 63, 0], [255, 66, 0], [255, 69, 0], [255, 72, 0], [255, 75, 0], [255, 78, 0], [255, 80, 0], [255, 82, 0], [255, 85, 0], [255, 87, 0], [255, 89, 0], [255, 91, 0], [255, 93, 0], [255, 95, 0], [255, 97, 0], [255, 99, 0], [255, 101, 0], [255, 103, 0], [255, 105, 0], [255, 107, 0], [255, 108, 0], [255, 110, 0], [255, 112, 0], [255, 113, 0], [255, 115, 0], [255, 117, 0], [255, 118, 0], [255, 120, 0], [255, 121, 0], [255, 123, 0], [255, 124, 0], [255, 126, 0], [255, 127, 0], [255, 132, 0], [255, 137, 0], [255, 141, 0], [255, 146, 0], [254, 150, 0], [254, 154, 0], [254, 158, 0], [254, 161, 0], [254, 165, 0], [254, 169, 0], [254, 172, 0], [254, 176, 0], [254, 179, 0], [254, 182, 0], [254, 185, 0], [254, 188, 0], [254, 191, 0], [254, 194, 0], [254, 197, 0], [254, 200, 0], [254, 203, 0], [254, 206, 0], [254, 209, 0], [254, 211, 0], [254, 214, 0], [254, 217, 0], [254, 219, 0], [254, 222, 0], [254, 224, 0], [254, 227, 0], [254, 229, 0], [254, 232, 0], [254, 234, 0], [254, 237, 0], [255, 239, 0], [255, 242, 0], [255, 244, 0], [255, 246, 0], [255, 249, 0], [255, 251, 0], [255, 253, 0], [255, 255, 0], [253, 255, 0], [250, 255, 0], [247, 255, 0], [243, 254, 0], [240, 254, 0], [237, 254, 0], [234, 254, 0], [231, 254, 0], [228, 253, 0], [225, 253, 0], [221, 253, 0], [218, 253, 0], [214, 253, 0], [211, 253, 0], [207, 252, 0], [204, 252, 0], [200, 252, 0], [197, 252, 0], [193, 252, 0], [189, 252, 0], [185, 252, 0], [181, 252, 0], [177, 252, 0], [172, 252, 0], [168, 252, 0], [164, 252, 0], [159, 252, 0], [154, 252, 0], [149, 252, 0], [144, 252, 0], [138, 252, 0], [132, 252, 0], [126, 252, 0], [119, 253, 0], [112, 253, 0], [104, 253, 0], [96, 253, 0], [86, 254, 0], [75, 254, 0], [61, 255, 0], [42, 255, 0], [0, 255, 0], [0, 253, 42], [0, 250, 61], [0, 247, 75], [0, 244, 87], [0, 242, 97], [0, 239, 105], [0, 236, 113], [0, 233, 121], [0, 230, 128], [0, 227, 134], [0, 223, 140], [0, 220, 146], [0, 217, 151], [0, 214, 156], [0, 210, 161], [0, 207, 166], [0, 203, 171], [0, 199, 175], [0, 196, 179], [0, 192, 184], [0, 188, 188], [0, 184, 192], [0, 179, 196], [0, 175, 199], [0, 171, 203], [0, 166, 207], [0, 161, 210], [0, 156, 214], [0, 151, 217], [0, 146, 220], [0, 140, 223], [0, 134, 227], [0, 128, 230], [0, 121, 233], [0, 113, 236], [0, 105, 239], [0, 97, 242], [0, 87, 244], [0, 75, 247], [0, 61, 250], [0, 42, 253], [0, 0, 255], [2, 1, 252], [4, 3, 249], [6, 5, 245], [8, 7, 242], [10, 9, 238], [12, 10, 234], [13, 12, 231], [15, 13, 227], [16, 14, 224], [17, 16, 220], [18, 17, 217], [19, 18, 213], [21, 19, 210], [21, 20, 206], [22, 21, 203], [23, 21, 199], [24, 22, 195], [25, 23, 192], [26, 24, 188], [26, 24, 185], [27, 25, 181], [28, 26, 177], [29, 26, 174], [29, 27, 170], [30, 28, 166], [31, 28, 163], [31, 29, 159], [32, 30, 155], [32, 30, 151], [33, 31, 148], [34, 31, 144], [35, 32, 140], [35, 33, 136], [36, 34, 132], [37, 34, 128], [38, 35, 124], [39, 36, 119], [40, 37, 115], [41, 38, 110], [42, 39, 106], [44, 41, 100], [46, 43, 95], [49, 40, 99], [51, 39, 104], [54, 37, 108], [56, 36, 112], [59, 35, 116], [61, 34, 120], [64, 33, 124], [66, 32, 128], [68, 32, 132], [70, 31, 136], [73, 30, 140], [75, 30, 144], [77, 29, 148], [79, 29, 151], [81, 28, 155], [84, 27, 159], [86, 27, 163], [88, 26, 167], [90, 26, 170], [92, 25, 174], [94, 24, 178], [97, 24, 182], [99, 23, 185], [101, 22, 189], [103, 22, 193], [105, 21, 196], [107, 20, 200], [109, 19, 204], [112, 18, 208], [114, 17, 211], [116, 16, 215], [118, 15, 219], [120, 14, 222], [122, 13, 226], [124, 12, 230], [126, 10, 233], [129, 8, 237], [131, 7, 241], [133, 5, 244], [135, 3, 248], [137, 1, 252]],
	[[182, 191, 193], [182, 191, 193], [181, 190, 192], [180, 189, 191], [179, 187, 190], [177, 186, 188], [176, 185, 187], [175, 184, 186], [174, 182, 185], [173, 181, 183], [171, 180, 182], [170, 179, 181], [169, 177, 180], [168, 176, 178], [166, 175, 177], [165, 174, 176], [164, 172, 175], [163, 171, 173], [162, 170, 172], [160, 169, 171], [159, 167, 170], [158, 166, 168], [157, 165, 167], [155, 163, 166], [154, 162, 165], [153, 161, 163], [152, 160, 162], [151, 158, 161], [149, 157, 160], [148, 156, 158], [147, 155, 157], [146, 153, 156], [145, 152, 155], [143, 151, 153], [142, 149, 152], [141, 148, 151], [140, 147, 150], [138, 146, 148], [137, 144, 147], [136, 143, 146], [135, 142, 145], [134, 141, 143], [132, 139, 142], [131, 138, 141], [130, 137, 140], [129, 135, 138], [127, 134, 137], [126, 133, 136], [125, 132, 135], [124, 130, 133], [122, 129, 132], [121, 128, 131], [120, 127, 130], [119, 125, 128], [118, 124, 127], [116, 123, 126], [115, 121, 125], [114, 120, 123], [113, 119, 122], [111, 118, 121], [110, 116, 120], [109, 115, 118], [108, 114, 117], [106, 112, 116], [105, 111, 115], [104, 110, 113], [103, 109, 112], [101, 107, 111], [100, 106, 110], [99, 105, 108], [98, 103, 107], [97, 102, 106], [95, 101, 105], [94, 100, 103], [93, 98, 102], [92, 97, 101], [90, 96, 100], [89, 94, 98], [88, 93, 97], [87, 92, 96], [85, 90, 95], [84, 89, 93], [83, 88, 92], [82, 87, 91], [80, 85, 90], [79, 84, 88], [78, 83, 87], [76, 81, 86], [75, 80, 85], [74, 79, 83], [73, 77, 82], [71, 76, 81], [70, 75, 80], [69, 74, 78], [68, 72, 77], [66, 71, 76], [65, 70, 75], [64, 68, 73], [62, 67, 72], [61, 66, 71], [60, 64, 70], [59, 63, 69], [57, 62, 67], [56, 60, 66], [55, 59, 65], [53, 58, 64], [52, 56, 63], [51, 55, 61], [49, 54, 60], [48, 52, 59], [47, 51, 58], [45, 49, 57], [44, 48, 56], [43, 47, 54], [41, 45, 53], [40, 44, 52], [38, 42, 51], [37, 41, 50], [35, 39, 49], [34, 38, 48], [32, 36, 47], [30, 35, 47], [28, 33, 46], [26, 31, 45], [24, 30, 45], [21, 27, 45], [18, 25, 45], [13, 22, 46], [5, 18, 48], [10, 21, 47], [14, 24, 47], [17, 26, 47], [20, 28, 47], [21, 29, 48], [23, 31, 49], [25, 32, 50], [26, 34, 50], [28, 35, 51], [29, 37, 53], [30, 38, 54], [32, 39, 55], [33, 41, 56], [34, 42, 57], [35, 43, 58], [36, 44, 59], [38, 46, 61], [39, 47, 62], [40, 48, 63], [41, 49, 64], [42, 51, 65], [43, 52, 67], [44, 53, 68], [45, 54, 69], [46, 55, 70], [48, 57, 72], [49, 58, 73], [50, 59, 74], [51, 60, 75], [52, 61, 77], [53, 62, 78], [54, 64, 79], [55, 65, 80], [56, 66, 82], [57, 67, 83], [58, 68, 84], [59, 69, 86], [60, 71, 87], [61, 72, 88], [62, 73, 89], [63, 74, 91], [65, 75, 92], [66, 76, 93], [67, 78, 94], [68, 79, 96], [69, 80, 97], [70, 81, 98], [71, 82, 100], [72, 83, 101], [73, 85, 102], [74, 86, 103], [75, 87, 105], [76, 88, 106], [77, 89, 107], [78, 90, 109], [79, 92, 110], [80, 93, 111], [81, 94, 112], [82, 95, 114], [83, 96, 115], [84, 97, 116], [85, 98, 117], [86, 100, 119], [87, 101, 120], [88, 102, 121], [89, 103, 123], [90, 104, 124], [91, 105, 125], [92, 106, 126], [93, 108, 128], [94, 109, 129], [95, 110, 130], [97, 111, 132], [98, 112, 133], [99, 113, 134], [100, 114, 135], [101, 116, 137], [102, 117, 138], [103, 118, 139], [104, 119, 140], [105, 120, 142], [106, 121, 143], [107, 122, 144], [108, 124, 146], [109, 125, 147], [110, 126, 148], [111, 127, 149], [112, 128, 151], [113, 129, 152], [114, 130, 153], [115, 132, 155], [116, 133, 156], [117, 134, 157], [118, 135, 158], [119, 136, 160], [120, 137, 161], [121, 138, 162], [122, 139, 163], [123, 141, 165], [124, 142, 166], [125, 143, 167], [126, 144, 169], [127, 145, 170], [128, 146, 171], [129, 147, 172], [130, 149, 174], [131, 150, 175], [132, 151, 176], [133, 152, 177], [134, 153, 179], [135, 154, 180], [136, 155, 181], [137, 156, 183], [138, 158, 184], [139, 159, 185], [140, 160, 186], [141, 161, 188], [142, 162, 189], [143, 163, 190], [144, 164, 191], [145, 165, 193], [146, 167, 194], [147, 168, 195], [148, 169, 196], [149, 170, 198], [150, 171, 199]],
	[[255, 255, 255], [255, 255, 255], [254, 254, 254], [253, 253, 253], [252, 252, 252], [251, 251, 251], [250, 250, 250], [249, 249, 249], [248, 248, 248], [247, 247, 247], [246, 246, 246], [245, 245, 245], [244, 244, 244], [243, 243, 243], [242, 242, 242], [241, 241, 241], [240, 240, 240], [239, 239, 239], [238, 238, 238], [237, 237, 237], [236, 236, 236], [235, 235, 235], [234, 234, 234], [233, 233, 233], [232, 232, 232], [231, 231, 231], [230, 230, 230], [229, 229, 229], [228, 228, 228], [227, 227, 227], [226, 226, 226], [225, 225, 225], [223, 223, 223], [222, 222, 222], [221, 221, 221], [220, 220, 220], [219, 219, 219], [218, 218, 218], [217, 217, 217], [216, 216, 216], [215, 215, 215], [214, 214, 214], [213, 213, 213], [212, 212, 212], [211, 211, 211], [210, 210, 210], [209, 209, 209], [208, 208, 208], [207, 207, 207], [206, 206, 206], [205, 205, 205], [204, 204, 204], [203, 203, 203], [202, 202, 202], [201, 201, 201], [200, 200, 200], [199, 199, 199], [198, 198, 198], [197, 197, 197], [196, 196, 196], [194, 194, 194], [193, 193, 193], [192, 192, 192], [191, 191, 191], [190, 190, 190], [189, 189, 189], [188, 188, 188], [187, 187, 187], [186, 186, 186], [185, 185, 185], [184, 184, 184], [183, 183, 183], [182, 182, 182], [181, 181, 181], [180, 180, 180], [179, 179, 179], [178, 178, 178], [177, 177, 177], [176, 176, 176], [175, 175, 175], [174, 174, 174], [173, 173, 173], [172, 172, 172], [171, 171, 171], [169, 169, 169], [168, 168, 168], [167, 167, 167], [166, 166, 166], [165, 165, 165], [164, 164, 164], [163, 163, 163], [162, 162, 162], [161, 161, 161], [160, 160, 160], [159, 159, 159], [158, 158, 158], [157, 157, 157], [156, 156, 156], [155, 155, 155], [154, 154, 154], [153, 153, 153], [152, 152, 152], [151, 151, 151], [150, 150, 150], [149, 149, 149], [148, 148, 148], [146, 146, 146], [145, 145, 145], [144, 144, 144], [143, 143, 143], [142, 142, 142], [141, 141, 141], [140, 140, 140], [139, 139, 139], [138, 138, 138], [137, 137, 137], [136, 136, 136], [135, 135, 135], [134, 134, 134], [133, 133, 133], [132, 132, 132], [131, 131, 131], [130, 130, 130], [129, 129, 129], [128, 128, 128], [127, 127, 127], [125, 125, 125], [124, 124, 124], [123, 123, 123], [122, 122, 122], [121, 121, 121], [120, 120, 120], [119, 119, 119], [118, 118, 118], [117, 117, 117], [116, 116, 116], [115, 115, 115], [114, 114, 114], [113, 113, 113], [112, 112, 112], [111, 111, 111], [110, 110, 110], [109, 109, 109], [108, 108, 108], [107, 107, 107], [105, 105, 105], [104, 104, 104], [103, 103, 103], [102, 102, 102], [101, 101, 101], [100, 100, 100], [99, 99, 99], [98, 98, 98], [97, 97, 97], [96, 96, 96], [95, 95, 95], [94, 94, 94], [93, 93, 93], [92, 92, 92], [91, 91, 91], [90, 90, 90], [88, 88, 88], [87, 87, 87], [86, 86, 86], [85, 85, 85], [84, 84, 84], [83, 83, 83], [82, 82, 82], [81, 81, 81], [80, 80, 80], [79, 79, 79], [78, 78, 78], [77, 77, 77], [76, 76, 76], [75, 75, 75], [74, 74, 74], [73, 73, 73], [71, 71, 71], [70, 70, 70], [69, 69, 69], [68, 68, 68], [67, 67, 67], [66, 66, 66], [65, 65, 65], [64, 64, 64], [63, 63, 63], [62, 62, 62], [61, 61, 61], [60, 60, 60], [59, 59, 59], [58, 58, 58], [56, 56, 56], [55, 55, 55], [54, 54, 54], [53, 53, 53], [52, 52, 52], [51, 51, 51], [50, 50, 50], [49, 49, 49], [48, 48, 48], [47, 47, 47], [46, 46, 46], [45, 45, 45], [43, 43, 43], [42, 42, 42], [41, 41, 41], [40, 40, 40], [39, 39, 39], [38, 38, 38], [37, 37, 37], [36, 36, 36], [35, 35, 35], [34, 34, 34], [33, 33, 33], [32, 32, 32], [30, 30, 30], [29, 29, 29], [28, 28, 28], [27, 27, 27], [26, 26, 26], [25, 25, 25], [24, 24, 24], [23, 23, 23], [22, 22, 22], [21, 21, 21], [20, 20, 20], [18, 18, 18], [17, 17, 17], [16, 16, 16], [15, 15, 15], [14, 14, 14], [13, 13, 13], [12, 12, 12], [11, 11, 11], [10, 10, 10], [8, 8, 8], [7, 7, 7], [7, 7, 7], [6, 6, 6], [5, 5, 5], [4, 4, 4], [3, 3, 3], [3, 3, 3], [2, 2, 2], [2, 2, 2], [1, 1, 1], [1, 1, 1], [1, 1, 1], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
];
var optColor = 1; 

var cells = null;
var cellsOld = null;
var cellsTx = null;
var cellsIm = null;

var kernel = null;
var kernelRe = null;
var kernelIm = null;

var potential = null;
var potentialRe = null;
var potentialIm = null;

var field = null;

var CANVAS_CELLS = null;
var CANVAS_FIELD = null;
var CANVAS_POTENTIAL = null;
var CANVAS_KERNEL = null;
var CANVAS_HIDDEN = null;


var shiftX, shiftY;
var oldmX, oldmY;

//*** main
function BodyOnload() {
	// Set world
	var size_power2 = 7
	ResizeAll(size_power2);

	// Set animal
    init(defaultLeniaxMetadata["config"]);

	run();
}

function ResizeAll(size_power2) {
    // This fix the global canvas size to 256x256
	var min = -2
	var max = 3
	var pixel_size_power2 = Bound(8 - size_power2, min, max);
	ResizeField(size_power2, pixel_size_power2);
}

function ResizeField(size_power2, pixel_size_power2) {
	WORLD_SIZE = 1 << size_power2;
	PIXEL = (pixel_size_power2>=0) ? 1 << pixel_size_power2 : Round(Math.pow(2, pixel_size_power2));
	P_SIZE = Math.round(WORLD_SIZE * PIXEL);

	InitAllArrays(WORLD_SIZE);
	InitAllCanvas();
}

function InitAllArrays(world_size) {
	cells = null;      cells = InitArray(world_size);
	cellsOld = null;   cellsOld = InitArray(world_size);
	cellsTx = null;    cellsTx = InitArray(world_size);
	cellsIm = null;    cellsIm = InitArray(world_size);
	
	kernel = null;     kernel = InitArray(world_size);
	kernelRe = null;   kernelRe = InitArray(world_size);
	kernelIm = null;   kernelIm = InitArray(world_size);

	potential = null;      potential = InitArray(world_size);
	potentialRe = null;    potentialRe = InitArray(world_size);
	potentialIm = null;    potentialIm = InitArray(world_size);

	field = null;      field = InitArray(world_size);
}

function InitArray(world_size) {
	var arr = [];
	for (var i=0; i<world_size; i++)
		arr.push(new Array(world_size).fill(0));
	return arr;
}

function InitAllCanvas() {
	CANVAS_CELLS = InitCanvas("CANVAS_CELLS");
	CANVAS_FIELD = InitCanvas("CANVAS_FIELD");
	CANVAS_POTENTIAL = InitCanvas("CANVAS_POTENTIAL");
	CANVAS_KERNEL = InitCanvas("CANVAS_KERNEL");
	CANVAS_HIDDEN = InitCanvas("CANVAS_HIDDEN");
}

function InitCanvas(id) {
	var canvas = document.getElementById(id);
	canvas.width = canvas.height = P_SIZE;
	canvas.style.width = canvas.width+"px"; canvas.style.height = canvas.height+"px";
	var ctx = canvas.getContext("2d");
	var img = ctx.createImageData(canvas.width, canvas.height);
	var rect = canvas.getBoundingClientRect();

	return { can: canvas, ctx: ctx, img: img, left: rect.left, top: rect.top };
}

function run() {    
    var fps = 30;
    var fpsInterval = 1000 / fps;
    var startTime, now, then, elapsed;

    then = Date.now();
    startTime = then;

	function loop() {
        window.requestAnimationFrame(loop);

        now = Date.now();
		elapsed = now - then;
        if (elapsed > fpsInterval) {
			then = now - (elapsed % fpsInterval);
            if (IS_RUNNING) {
                update_fn();
                DrawAllPanels();

                if (runGen==0) {
                    runGen = null;
                    IS_RUNNING = false;
                }
            }
        }
	}
	loop()
}


//*** util
function Round(x) { return Math.round(x * PRECISION) / PRECISION; }
function Bound(x, min, max) { var v = Math.round(x * PRECISION) / PRECISION; return v<min ? min : v>max ? max : v; }
function Mod(x, n) { return ((x % n) + n) % n; }
function IsZero(x) { return (x < EPSILON && x > -EPSILON); }
function IsEq(x, y) { return (x-y < EPSILON && x-y > -EPSILON); }
function IsPos(x) { return (x > EPSILON); }
function IsNeg(x) { return (x < -EPSILON); }


//**random
function Random() { return genrand_real2(); }
function RandomInt(min, max) { return Math.floor(Random() * (max + 1 - min) + min); }
function RandomFloat(min, max) { return Random() * (max - min) + min; }

//*** calc
function get_kernel(kernels_params) {
	var k_id = kernels_params[0]['k_id']
	var k_q = kernels_params[0]['q']
	var k_r = kernels_params[0]['r']
	var tmp_bs = kernels_params[0]['b']
	if (typeof(tmp_bs) == "string") {
		var bs = []
		var tmp_bs_arr = tmp_bs.split(',')
		for (let index = 0; index < tmp_bs_arr.length; index++) {
			const split = tmp_bs_arr[index].split('/');
			if (split.length == 2) {
				bs.push(parseInt(split[0], 10) / parseInt(split[1], 10))
			} else {
				bs.push(parseFloat(split[0]))
			}
		}
	} else {
		var bs = kernels_params[0]['b']
	}

	var weight = 0.0;
	const world_size_center = WORLD_SIZE/2
	for (var i=0; i<WORLD_SIZE; i++) {
		for (var j=0; j<WORLD_SIZE; j++) {
			var ii = ((i + world_size_center) % WORLD_SIZE) - world_size_center;
			var jj = ((j + world_size_center) % WORLD_SIZE) - world_size_center;
			var r = Math.sqrt(ii*ii + jj*jj) / NS;
			var v = kernelShell(k_id, k_q, bs, k_r, r);
			weight += v;
			kernelRe[i][j] = v;
			ii = WORLD_SIZE - ((i + WORLD_SIZE/2) % WORLD_SIZE) - 1;
			jj = ((j + WORLD_SIZE/2) % WORLD_SIZE);
			kernel[ii][jj] = v;
		}
	}

	for (var i=0; i<WORLD_SIZE; i++) {
		for (var j=0; j<WORLD_SIZE; j++) {
			kernelRe[i][j] /= weight;
			kernelIm[i][j] /= weight;
		}
	}

	FFT2D(1, kernelRe, kernelIm);

	isKernelDrawn = false;
}

function update_fn(isUpdate) {
	if (isUpdate==null) isUpdate = true;
	for (var i=0; i<WORLD_SIZE; i++)
		for (var j=0; j<WORLD_SIZE; j++)
			cellsOld[i][j] = cells[i][j];
	for (var i=0; i<WORLD_SIZE; i++)
		cellsIm[i].fill(0);

	// f * g = F-1( F(f) dot F(g) )
	FFT2D(1, cells, cellsIm);
	MatrixDot(cells, cellsIm, kernelRe, kernelIm, potentialRe, potentialIm);
	FFT2D(-1, potentialRe, potentialIm);

	shiftX = (optCenter === Center_OFF) ? 0 : Math.floor(mX - WORLD_SIZE/2);
	shiftY = (optCenter === Center_OFF) ? 0 : Math.floor(mY - WORLD_SIZE/2);

	for (var i=0; i<WORLD_SIZE; i++) {
		for (var j=0; j<WORLD_SIZE; j++) {
			var ii = (optCenter==Center_OFF) ? i : Mod(i-shiftY, WORLD_SIZE);
			var jj = (optCenter==Center_OFF) ? j : Mod(j-shiftX, WORLD_SIZE);

			var p = potential[ii][jj] = potentialRe[i][j];
			var d = field[ii][jj] = growthFn(gf_id, gf_m, gf_s, p);
			var v = cellsOld[i][j] + d / TS;
			if (v<0) v = 0; else if (v>1.) v = 1.;
			if (isUpdate) {
				cells[ii][jj] = v;
			} else {
				cells[i][j] = cellsOld[i][j]
			};
		}
	}
	if (isUpdate) {
		gen++;
		if (runGen != null) runGen--;
		time = Round(time + Round(1/TS));
		transA = transS = null;
	}
}



function DrawAllPanels() {
	DrawArray(CANVAS_CELLS, cells, 1);
	DrawArray(CANVAS_FIELD, field, 1);
	DrawArray(CANVAS_POTENTIAL, potential, 0.5 / gf_m);

	if (isKernelDrawn === false) {
		DrawArray(CANVAS_KERNEL, kernel, 1);
		isKernelDrawn = true;
	}

}

function DrawArray(canvas, arr, max_val) {
	var isAutoCenter = (optCenter!=Center_OFF) && !isHalf && (NS != 2);
	var buf = isAutoCenter ? CANVAS_HIDDEN.img.data : canvas.img.data;
	var p = 0, rgba;
	for (var i=0; i<P_SIZE; i++) {
		var ii = Math.floor(i / PIXEL);
		for (var j=0; j<P_SIZE; j++) {
			var jj = Math.floor(j / PIXEL);
			
			var v = arr[ii][jj] * max_val;
			var c = Math.floor(v * 254)
			c = Math.max(c, 0);
			c = Math.min(c, 254);
			rgba = COLORS[optColor][c];
			for (var n=0; n<3; n++){
				buf[p++] = rgba[n];
			}

			buf[p++] = 255;
		}
	}

	var canvas0 = isAutoCenter ? CANVAS_HIDDEN : canvas;
	canvas0.ctx.putImageData(canvas0.img, 0, 0);

	//*** auto center
	if (isAutoCenter) {
		var tX = oldmX * PIXEL;
		var tY = oldmY * PIXEL;
		canvas.ctx.save();
		canvas.ctx.fillStyle = 'rgb(255, 255, 255)'
		canvas.ctx.fillRect(0, 0, P_SIZE, P_SIZE);
		
		canvas.ctx.translate(P_SIZE/2, P_SIZE/2);
		canvas.ctx.drawImage(canvas0.can, -tX, -tY, P_SIZE, P_SIZE);
		canvas.ctx.restore();
	}
}


/////////////////////////////// 
// Loader
///////////////////////////////
function init(config) {
	var scale = config["world_params"]["scale"]
	var cellsSt = config["cells"]
	var init_cells = decompress_array(cellsSt)

	SetRule(config["world_params"], config["kernels_params"]);
	get_kernel(config["kernels_params"]);
	
	var x1 = Math.floor(WORLD_SIZE / 2 - init_cells.shape[2] / 2 * scale)
	var y1 = Math.floor(WORLD_SIZE / 2 - init_cells.shape[1] / 2 * scale)
	AddCellArray(init_cells, x1, y1, 0, 0, scale, 0, 0);
}

function SetRule(leniax_world_params, kernels_params) {
	NS = leniax_world_params["R"]
	TS = leniax_world_params["T"]

	gf_id = kernels_params[0]['gf_id']
	gf_m = kernels_params[0]['m']
	gf_s = kernels_params[0]['s']

	var scale = leniax_world_params["scale"]
	if (scale!=1) {
		NS = Math.round(Bound(NS * scale, 2, WORLD_SIZE));
	}
}

function decompress_array(string_cells) {
	var string_array = string_cells.split('::')

	console.assert(string_array.length == 2 && string_array[0].length % 2 == 0)

	var max_val = NB_CHARS**2 - 1
	var raw_shape = string_array[1].split(";")
	var cells_shape = []
	for (let index = 0; index < raw_shape.length; index++) {
		cells_shape.push(parseInt(raw_shape[index], 10));
	}
	var cells_val_l = []
	for (let index = 0; index < string_array[0].length; index += 2) {
		var val_i = ch2val(string_array[0][index] + string_array[0][index + 1])
		var val_f = val_i / max_val
		cells_val_l.push(val_f)
		
	}
	var cells = createArray(cells_val_l, cells_shape)

	return cells
}

function ch2val(c) {
    console.assert(c.length == 2)

    var first_char = c[0]
    var second_char = c[1]

    if(ord(first_char) >= ord('À')){
        var first_char_idx = ord(first_char) - ord('À') + (ord('Z') - ord('A')) + (ord('z') - ord('a'))
	} else if(ord(first_char) >= ord('a')){
        var first_char_idx = ord(first_char) - ord('a') + (ord('Z') - ord('A'))
	} else {
        var first_char_idx = ord(first_char) - ord('A')
	}

    if(ord(second_char) >= ord('À')){
        var second_char_idx = ord(second_char) - ord('À') + (ord('Z') - ord('A')) + (ord('z') - ord('a'))
	} else if(ord(second_char) >= ord('a')){
        var second_char_idx = ord(second_char) - ord('a') + (ord('Z') - ord('A'))
	} else {
        var second_char_idx = ord(second_char) - ord('A')
	}

    return first_char_idx * NB_CHARS + second_char_idx
}

function createArray(flat_data, shape) {
	console.assert(shape.length == 3)

	var nb_channels = shape[0]
	var nb_rows = shape[1]
	var nb_cols = shape[2]
	
	var arr = new Array(nb_channels)
	for (let i = 0; i < nb_channels; i++) {
		var channel = new Array(nb_rows)
		for (let j = 0; j < nb_rows; j++) {
			var row = new Array(nb_cols)
			for (let k = 0; k < nb_cols; k++) {
				row[k] = flat_data[i * (nb_rows + nb_cols) + j * nb_cols + k]
			}
			channel[j] = row
		}
		arr[i] = channel
	}

	var arr_data = {
		arr: arr,
		shape: shape
	}
	return arr_data
}

function AddCellArray(newCells, x1, y1, x2, y2, scale, angle, flip) {
	var arr = newCells.arr[0]
	var h = newCells.shape[1]
	var w = newCells.shape[2]
	
	var sin = Math.sin(angle / 180 * π);
	var cos = Math.cos(angle / 180 * π);
	var fh = ( Math.abs(h*cos) + Math.abs(w*sin) + 1) * scale - 1;
	var fw = ( Math.abs(w*cos) + Math.abs(h*sin) + 1) * scale - 1;
	var fi0 = (y2<=0) ? y1 : RandomInt(y1, y2 - fh);
	var fj0 = (x2<=0) ? x1 : RandomInt(x1, x2 - fw);
	for (var fi=0; fi<fh; fi++) {
		for (var fj=0; fj<fw; fj++) {
			var i = Math.round( (- (fj-fw/2)*sin + (fi-fh/2)*cos) / scale + h/2 );
			var j = Math.round( (+ (fj-fw/2)*cos + (fi-fh/2)*sin) / scale + w/2 );
			var fii = Mod(fi+fi0, WORLD_SIZE);
			var fjj = Mod(fj+fj0, WORLD_SIZE);
			if (flip==2||flip==3) i = h - 1 - i;
			if (flip==1||flip==3) j = w - 1 - j;
			var c = (i>=0 && j>=0 && i<h && j<arr[i].length) ? arr[i][j] : 0;
			var v = (c!="") ? parseFloat(c) : 0;
			if (v>0) cells[fii][fjj] = v;
		}
	}
}

///////////////////////////
// Kernels
///////////////////////////
function kernelShell(k_id, k_q, bs, k_r, dist) {
	var nb_b = bs.length
	var b_dist = nb_b * dist
	var b_threshold = bs[Math.min(parseInt(Math.floor(b_dist), 10), nb_b - 1)]

    var k_val = (dist < 1) * kernelFn(k_id, k_q, b_dist % 1) * b_threshold

	return k_val
}

function kernelFn(k_id, k_q, x) {
    switch (k_id) {
        case 0: return (4 * x * (1 - x))**k_q
        case 1: var out = k_q - (1 / (x * (1 - x))); return Math.exp(k_q * out)
        case 2: return (x >= k_q && x <= 1 - k_q) ? 1 : 0;
        case 3: return ((x >= k_q && x <= 1 - k_q) ? 1 : 0) + (x < k_q) * 0.5
        case r: var out = ((x - k_q) / (0.3 * k_q))**2; return Math.exp(- out / 2)
    }
}

var gf_id = 0;
var gf_m = 0.14;
var gf_s = 0.015;
function growthFn(gf_id, gf_m, gf_s, x) {
    var x = Math.abs(x - gf_m);
    var x = x * x;
    switch (gf_id) {
		case 0: var s_2 = 9 * gf_s * gf_s; return Math.max(1 - x / s_2, 0)**4 * 2 -1
		case 1: var s_2 = 2 * gf_s * gf_s; return Math.exp(- x / s_2) * 2 -1
		case 2: var s_2 = 2 * gf_s * gf_s; return Math.exp(- x / s_2)
		case 3: return ((x_abs <= gf_s) ? 1 : 0) * 2 -1
    }
}

///////////////////////////
// Maths
///////////////////////////
function FFT1D(dir, re1, im1) {
	var S = re1.length;
    var m = Round(Math.log2(S))
    var S2 = S >> 1
    var j1 = 0;
	for (var j=0; j<S-1; j++) {
		if (j < j1) {
			var tmp = re1[j]; re1[j] = re1[j1]; re1[j1] = tmp;
			tmp = im1[j]; im1[j] = im1[j1]; im1[j1] = tmp;
		}
		var j2 = S2;
		while (j2 <= j1) {
			j1 -= j2;
			j2 >>= 1;
		}
		j1 += j2;
	}
	
	/* Compute the FFT */
	var c1 = -1.0, c2 = 0.0, l2 = 1;
	for (var l=0; l<m; l++) {
		var l1 = l2;
		l2 <<= 1;
		var u1 = 1.0, u2 = 0.0;
		for (var i=0; i<l1; i++) {
			for (var j=i; j<S; j+=l2) {
				var j2 = j + l1;
				var t1 = u1 * re1[j2] - u2 * im1[j2];
				var t2 = u1 * im1[j2] + u2 * re1[j2];
				re1[j2] = re1[j] - t1;
				im1[j2] = im1[j] - t2;
				re1[j] += t1;
				im1[j] += t2;
			}
			var z = u1 * c1 - u2 * c2;
			u2 = u1 * c2 + u2 * c1;
			u1 = z;
		}
		c2 = Math.sqrt((1.0 - c1) / 2.0);
		if (dir == 1)
			c2 = -c2;
		c1 = Math.sqrt((1.0 + c1) / 2.0);
	}
	
	/* Scaling for forward transform */
	if (dir == -1) {
		var scale_f = 1.0 / S;		
		for (var j=0; j<S; j++) {
			re1[j] *= scale_f;
			im1[j] *= scale_f;
		}
	}
}

function FFT2D(dir, re2, im2) {
	var S = re2.length;
	for (var i=0; i<S; i++) {
		FFT1D(dir, re2[i], im2[i]);
	}
	for (var i=0; i<S; i++) {
		for (var j=0; j<i; j++) {
			var tmp = re2[i][j]; re2[i][j] = re2[j][i]; re2[j][i] = tmp;
		}
	}
	for (var i=0; i<S; i++) {
		for (var j=0; j<i; j++) {
			var tmp = im2[i][j]; im2[i][j] = im2[j][i]; im2[j][i] = tmp;
		}
	}
	for (var i=0; i<S; i++) {
		FFT1D(dir, re2[i], im2[i]);
	}
}

function MatrixDot(ar, ai, br, bi, cr, ci) {
	var S = ar.length;
	for (var i=0; i<S; i++) {
		var ar_i = ar[i], ai_i = ai[i];
		var br_i = br[i], bi_i = bi[i];
		var cr_i = cr[i], ci_i = ci[i];
		for (var j=0; j<S; j++) {
			var a = ar_i[j]; var b = ai_i[j];
			var c = br_i[j]; var d = bi_i[j];
			var t = a * (c + d);
			cr_i[j] = t - d*(a+b);
			ci_i[j] = t + c*(b-a);
		}
	}
}

function ClearField(x) {
	for (var i=0; i<WORLD_SIZE; i++) {
		for (var j=0; j<WORLD_SIZE; j++) {
			cells[i][j] = x;
		}
	}

	update_fn(false);
}

function TransformField(dX, dY, dS, dA, flip) {
	//*** flip:1(horiz), 2(vert), 3(h+v), 4(mirror horiz), 5(mirror+flip horiz), 6(mirror diag)
	if (dS!=1) {
		NS = Math.round(Bound(NS * dS, 2, WORLD_SIZE));
		get_kernel();
	}

	if ((dA == 0 || transA == null) && (dS == 1 || transS == null)) {
		for (var i=0; i<WORLD_SIZE; i++)
			for (var j=0; j<WORLD_SIZE; j++)
				cellsTx[i][j] = cells[i][j];
	}

	if (dA == 0) {
		transA = null;
	} else {
		if (transA == null) transA = 0;
		dA = transA = transA + dA;
	}
	if (dS == 1) {
		transS = null;
	} else {
		if (transS == null) transS = 1;
		transS = transS * dS;
		dS = Round(transS);
	}
	for (var i=0; i<WORLD_SIZE; i++)
		cells[i].fill(0);

	var sin = Math.sin(dA / 180 * π);
	var cos = Math.cos(dA / 180 * π);
	var S = (dS<1) ? Math.round(WORLD_SIZE*dS) : WORLD_SIZE;
	var D = (dS<1) ? Math.round(WORLD_SIZE*(1-dS)/2) : 0;
	for (var i=D; i<S+D; i++) {
		for (var j=D; j<S+D; j++) {
			var ii = Math.round( (- (j-WORLD_SIZE/2)*sin + (i-WORLD_SIZE/2)*cos) / dS + WORLD_SIZE/2 - dY);
			var jj = Math.round( (+ (j-WORLD_SIZE/2)*cos + (i-WORLD_SIZE/2)*sin) / dS + WORLD_SIZE/2 - dX);
			ii = Mod(ii, WORLD_SIZE);
			jj = Mod(jj, WORLD_SIZE);
			if (flip==Flip_V||flip==Flip_HV||(flip==Mirror_X&&j>S/2)) ii = WORLD_SIZE-1-ii;
			if (flip==Flip_H||flip==Flip_HV||(flip==Mirror_H&&j>S/2)||(flip==Mirror_X&&j>S/2)) jj = WORLD_SIZE-1-jj;
			if (flip==Mirror_D&&ii+jj>WORLD_SIZE) { var tmp = ii; ii = WORLD_SIZE-1-jj; jj = WORLD_SIZE-1-tmp; }
			cells[i][j] = cellsTx[ii][jj];
		}
	}
	update_fn(false);
}
///////////////////////////
// Utils
///////////////////////////
function ord(letter) {
	return letter.charCodeAt(0);
	
}
function chr(code){
	return String.fromCharCode(code);
}